{"id":"js/shaders/shader01_frgmt.glsl","dependencies":[{"name":"/Users/avinvadas/Documents/Design/code projects/warp_03/package.json","includedInParent":true,"mtime":1646402075729}],"generated":{"js":"module.exports = \"\\n#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n#define PI 3.14159265359\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform float u_time;\\n\\nuniform float ripple_base_size;\\nuniform float whole_size;\\nuniform float ripple_number;\\nuniform float ripple_bleed;\\nuniform float center_clear_area;\\nuniform vec3 primary_color;\\nuniform vec3 secondary_color;\\nuniform float speed_factor;\\nuniform float direction;\\n\\nvoid main(){\\n   vec2 st = gl_FragCoord.xy/u_resolution.xy;\\n   st = st *2.0 -0.5;\\n   vec2 mouseRatio=  vec2(u_mouse.xy ) / vec2(u_resolution.xy );\\n   vec2 dMouse = abs(vec2(0.5)- mouseRatio) ;\\n   \\n\\n   //setting center and placement:\\n \\n  float pct = pow(distance(sin(st)*2.0 , vec2(sin(1.0))),(abs( 1.0-dMouse.y)/ abs(1.0- dMouse.x))*3.0);\\n\\n //setting repetitional pattern:\\n  \\n   float ripple_size=  sin(ripple_base_size); //width of a single ripple\\n //  whole_size = 15.; //overall size of the pattern\\n  //ripple_number = 3.0; //higher number = more ripples\\n  float d = length( (direction * pct- (u_time* (speed_factor*0.01)))); //distance from center\\n  \\n \\n\\n \\n  vec3 ripples= vec3(\\n    \\n    step(pct,whole_size))-\\n    vec3(smoothstep(ripple_size,ripple_size+ ripple_bleed, fract(d * ripple_number)))* //dark rings\\n    vec3(smoothstep(ripple_size,ripple_size+ ripple_bleed, fract(d * ripple_number * 2.))); \\n  \\n  vec3 levels = vec3(ripples );\\n//inverting b/w\\nvec3 bgColor = vec3(secondary_color);\\nvec3 levels_invert =  vec3(1.0 - levels);\\nvec3 color = ( vec3(levels_invert *bgColor)) + (primary_color * levels);\\nvec3 finalColor = color;\\n//write a function converting hexadecimal colors to d\\n//setting final frag shade:\\n   gl_FragColor = vec4( finalColor ,1.0);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1756},"source":"js/shaders/shader01_frgmt.glsl","original":{"line":1,"column":0}}],"sources":{"js/shaders/shader01_frgmt.glsl":"module.exports=\"\\n#ifdef GL_ES\\nprecision mediump float;\\n#define GLSLIFY 1\\n#endif\\n#define PI 3.14159265359\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform float u_time;\\n\\nuniform float ripple_base_size;\\nuniform float whole_size;\\nuniform float ripple_number;\\nuniform float ripple_bleed;\\nuniform float center_clear_area;\\nuniform vec3 primary_color;\\nuniform vec3 secondary_color;\\nuniform float speed_factor;\\nuniform float direction;\\n\\nvoid main(){\\n   vec2 st = gl_FragCoord.xy/u_resolution.xy;\\n   st = st *2.0 -0.5;\\n   vec2 mouseRatio=  vec2(u_mouse.xy ) / vec2(u_resolution.xy );\\n   vec2 dMouse = abs(vec2(0.5)- mouseRatio) ;\\n   \\n\\n   //setting center and placement:\\n \\n  float pct = pow(distance(sin(st)*2.0 , vec2(sin(1.0))),(abs( 1.0-dMouse.y)/ abs(1.0- dMouse.x))*3.0);\\n\\n //setting repetitional pattern:\\n  \\n   float ripple_size=  sin(ripple_base_size); //width of a single ripple\\n //  whole_size = 15.; //overall size of the pattern\\n  //ripple_number = 3.0; //higher number = more ripples\\n  float d = length( (direction * pct- (u_time* (speed_factor*0.01)))); //distance from center\\n  \\n \\n\\n \\n  vec3 ripples= vec3(\\n    \\n    step(pct,whole_size))-\\n    vec3(smoothstep(ripple_size,ripple_size+ ripple_bleed, fract(d * ripple_number)))* //dark rings\\n    vec3(smoothstep(ripple_size,ripple_size+ ripple_bleed, fract(d * ripple_number * 2.))); \\n  \\n  vec3 levels = vec3(ripples );\\n//inverting b/w\\nvec3 bgColor = vec3(secondary_color);\\nvec3 levels_invert =  vec3(1.0 - levels);\\nvec3 color = ( vec3(levels_invert *bgColor)) + (primary_color * levels);\\nvec3 finalColor = color;\\n//write a function converting hexadecimal colors to d\\n//setting final frag shade:\\n   gl_FragColor = vec4( finalColor ,1.0);\\n}\";"},"lineCount":null}},"error":null,"hash":"67b7245be6169052e6f770e945cebe90","cacheData":{"env":{}}}